@page "/dashboardSetting"
@attribute [Authorize]

@using Askianoor.AdminPanel.Data
@using Askianoor.AdminPanel.Data.Models

@inject NavigationManager NavigationManager
@inject DashboardSettingService DashboardSettingService

@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<h3>Dashboard Settings</h3>
<div class="row p-3">
    <div class="col col-12">

        <Validations @ref="validations" Mode="ValidationMode.Manual">
            @*Model="@DashboardSetting"*@

            <Tabs SelectedTabChanged="@OnSelectedTabChanged" IsPills="true">
                <Tab Name="Website" IsActive="@(selectedTabName == "Website")">Website</Tab>
                <Tab Name="HomePage" IsActive="@(selectedTabName == "HomePage")">Home Page</Tab>
                <Tab Name="Owner" IsActive="@(selectedTabName == "Owner")">Owner</Tab>
                <Tab Name="AboutMe" IsActive="@(selectedTabName == "AboutMe")">About Me</Tab>
                <Tab Name="Footer" IsActive="@(selectedTabName == "Footer")">Footer</Tab>
            </Tabs>
            <TabsContent @ref="tabContent" Class="p-3">

                <TabPanel IsActive="@(selectedTabName == "Website")">

                    <Field>
                        <FieldLabel>Website Title</FieldLabel>
                        <FieldBody>
                            <Validation Validator="@ValidationRule.IsNotEmpty">
                                <TextEdit Placeholder="Enter Website Title" @bind-Text="@DashboardSetting.WebsiteTitle">
                                    <Feedback>
                                        <ValidationNone>Please enter a valid Website Title</ValidationNone>
                                        <ValidationError>Please enter a valid Website Title!</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </Validation>
                        </FieldBody>
                    </Field>

                    <Field>
                        <FieldLabel>Website Header</FieldLabel>
                        <FieldBody>
                            <Validation Validator="@ValidationRule.IsNotEmpty">
                                <MemoEdit Rows="5" Placeholder="Enter Website Header" @bind-Text="@DashboardSetting.WebsiteHeader">
                                    <Feedback>
                                        <ValidationNone>Please enter a valid Website Header</ValidationNone>
                                        <ValidationError>Please enter a valid Website Header!</ValidationError>
                                    </Feedback>
                                </MemoEdit>
                            </Validation>
                        </FieldBody>
                    </Field>

                </TabPanel>
                <TabPanel IsActive="@(selectedTabName == "HomePage")">

                    <Field>
                        <FieldLabel>HomePage Text</FieldLabel>
                        <FieldBody>
                            <Validation Validator="@ValidationRule.IsNotEmpty">
                                <TextEdit Placeholder="Enter HomePage Text" @bind-Text="@DashboardSetting.HomePageText">
                                    <Feedback>
                                        <ValidationNone>Please enter a valid HomePage Text</ValidationNone>
                                        <ValidationError>Please enter a valid HomePage Text!</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </Validation>
                        </FieldBody>
                    </Field>

                    <Field>
                        <FieldLabel>HomePage Image</FieldLabel>
                        <FieldBody>
                            <Validation Validator="@ValidationRule.IsNotEmpty">
                                <TextEdit Placeholder="Enter HomePage Image URL" @bind-Text="@DashboardSetting.HomePageImage">
                                    <Feedback>
                                        <ValidationNone>Please enter a valid HomePage Image URL</ValidationNone>
                                        <ValidationError>Please enter a valid HomePage Image URL!</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </Validation>
                        </FieldBody>
                    </Field>

                </TabPanel>
                <TabPanel IsActive="@(selectedTabName == "Owner")">

                    <Field>
                        <FieldLabel>Owner Name</FieldLabel>
                        <FieldBody>
                            <Validation Validator="@ValidationRule.IsNotEmpty">
                                <TextEdit Placeholder="Enter Owner Name" @bind-Text="@DashboardSetting.OwnerName">
                                    <Feedback>
                                        <ValidationNone>Please enter a valid Owner Name</ValidationNone>
                                        <ValidationError>Please enter a valid Owner Name!</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </Validation>
                        </FieldBody>
                    </Field>

                    <Field>
                        <FieldLabel>Owner Image</FieldLabel>
                        <FieldBody>
                            <Validation Validator="@ValidationRule.IsNotEmpty">
                                <TextEdit Role="TextRole.Url" Placeholder="Enter Owner Image URL" @bind-Text="@DashboardSetting.OwnerPictureSrc">
                                    <Feedback>
                                        <ValidationNone>Please enter a valid Owner Image URL</ValidationNone>
                                        <ValidationError>Please enter a valid Owner Image URL!</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </Validation>
                        </FieldBody>
                    </Field>

                </TabPanel>
                <TabPanel IsActive="@(selectedTabName == "AboutMe")">
                    <BlazoredTextEditor @ref="@QuillHtmlAboutMe">
                        <ToolbarContent>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                                <option value="4"></option>
                                <option value="5"></option>
                            </select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                            <button class="btn btn-link" id="custom-button" @onclick="InsertImageClick">
                                <i class="fas fa-image" aria-hidden="true"></i>
                            </button>
                        </ToolbarContent>
                        <EditorContent>
                            @if(!string.IsNullOrEmpty(AboutMeContent))
                                @((MarkupString)AboutMeContent)
                            @*@((MarkupString)DashboardSetting.AboutMeDescription)*@
                        </EditorContent>
                    </BlazoredTextEditor>

                    <Field>
                        <FieldLabel>About Me Image</FieldLabel>
                        <FieldBody>
                            <Validation Validator="@ValidationRule.IsNotEmpty">
                                <TextEdit Role="TextRole.Url" Placeholder="Enter Owner Image URL" @bind-Text="@DashboardSetting.AboutMeImage">
                                    <Feedback>
                                        <ValidationNone>Please enter a valid About me Image URL</ValidationNone>
                                        <ValidationError>Please enter a valid About me Image URL!</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </Validation>
                        </FieldBody>
                    </Field>

                </TabPanel>
                <TabPanel IsActive="@(selectedTabName == "Footer")">
                    <BlazoredTextEditor @ref="@QuillHtmlFooter">
                        <ToolbarContent>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                                <option value="4"></option>
                                <option value="5"></option>
                            </select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                            <button class="btn btn-link" id="custom-button" @onclick="InsertFooterImageClick">
                                <i class="fas fa-image" aria-hidden="true"></i>
                            </button>
                        </ToolbarContent>
                        <EditorContent>
                            @if (!string.IsNullOrEmpty(FooterContent))
                                @((MarkupString)FooterContent)
                                @*@((MarkupString)DashboardSetting.FooterText)*@
                        </EditorContent>
                    </BlazoredTextEditor>
                </TabPanel>
            </TabsContent>



            <Field JustifyContent="JustifyContent.Start">
                <FieldBody>
                    <Button Color="Color.Success" Clicked="@updateDashboardSettings">Update Dashboard Settings</Button>
                </FieldBody>
            </Field>

        </Validations>

        <FileManagerDialog @ref="FileManagerControl" ImageSelected="InsertImage" />
        <FileManagerDialog @ref="FooterFileManagerControl" ImageSelected="InsertFooterImage" />

    </div>
</div>


@code {

    DashboardSetting DashboardSetting = new DashboardSetting();

    BlazoredTextEditor QuillHtmlAboutMe = new BlazoredTextEditor();
    BlazoredTextEditor QuillHtmlFooter = new BlazoredTextEditor();

    private string selectedTabName = "Website";
    private TabsContent tabContent;

    Validations validations;

    private FileManagerDialog FileManagerControl;
    private FileManagerDialog FooterFileManagerControl;

    bool rawHtmlFormat = false;

    string AboutMeContent = "";
    string FooterContent = "";

    protected override Task OnInitializedAsync()
    {
        GetDashboardSettingsData();
        return base.OnInitializedAsync();
    }

    private void OnSelectedTabChanged( string name )
    {
        selectedTabName = name;
        tabContent.SelectPanel( name );
    }

    public async void GetAboutMeHTML()
    {
        DashboardSetting.AboutMeDescription = await this.QuillHtmlAboutMe.GetHTML();
    }

    public void HtmlContentToggle()
    {
        rawHtmlFormat = rawHtmlFormat ? false : true;
    }

    private void InsertImageClick()
    {
        FileManagerControl.SetShowFileManager(true);
    }

    async Task InsertImage(string paramImageURL)
    {
        await this.QuillHtmlAboutMe.InsertImage(paramImageURL);
        FileManagerControl.SetShowFileManager(false);
    }

    private void InsertFooterImageClick()
    {
        FooterFileManagerControl.SetShowFileManager(true);
    }

    async Task InsertFooterImage(string paramImageURL)
    {
        await this.QuillHtmlFooter.InsertImage(paramImageURL);
        FooterFileManagerControl.SetShowFileManager(false);
    }

    //public async void SetAboutMeHTML()
    //{
    //    string QuillContent = DashboardSetting.AboutMeDescription;
    //    if (!string.IsNullOrEmpty(QuillContent))
    //    {
    //        await this.QuillHtmlAboutMe.LoadHTMLContent(QuillContent);
    //        StateHasChanged();
    //    }
    //}


    protected async void GetDashboardSettingsData()
    {
        DashboardSetting = await DashboardSettingService.GetDashboardSettings();
        if (DashboardSetting != null)
        {
            AboutMeContent = DashboardSetting.AboutMeDescription;
            FooterContent = DashboardSetting.FooterText;

            //await this.QuillHtmlAboutMe.LoadHTMLContent(AboutMeContent);
            //await this.QuillHtmlFooter.LoadHTMLContent(FooterContent);
            StateHasChanged();
        }
    }

    protected async void updateDashboardSettings()
    {

        if (validations.ValidateAll())
        {
            bool result = await DashboardSettingService.UpdateDashboardSetting(DashboardSetting);
            if (result)
            {
                // TODO : Successful Message
            }
            else
            {
                // TODO : Failed Message
            }

        }
        else
        {
            // TODO : Failed Message
        }
    }

    protected async void OnRowUpdating(DashboardSetting dashboardSetting)
    {

        if (await DashboardSettingService.UpdateDashboardSetting(dashboardSetting))
        {
            // Todo : Show message Done
            GetDashboardSettingsData();
        }
        else
        {
            // Todo : Show Failed message 
        }
    }

    //protected async void OnRowInserting(CancellableRowChange<DashboardSetting, Dictionary<string, object>> e)
    //{
    //    var dashboardSetting = e.Item;

    //    e.Values["Id"] = await DashboardSettingService.AddDashboardSetting(dashboardSetting);
    //    if ((int)e.Values["Id"] == 0)
    //        e.Cancel = true;
    //    else
    //        dashboardSettings.Add(e.Item);

    //    GetDashboardSettingsData();
    //}

    //protected async void OnRowUpdating(CancellableRowChange<DashboardSetting, Dictionary<string, object>> e)
    //{
    //    var dashboardSetting = new DashboardSetting(e.Item);

    //    dashboardSetting.Name = (string)e.Values["Name"];
    //    dashboardSetting.Level = (int)e.Values["Level"];
    //    dashboardSetting.cssClass = (string)e.Values["cssClass"];
    //    dashboardSetting.Group = (int)e.Values["Group"];

    //    if (await DashboardSettingService.UpdateDashboardSetting(dashboardSetting))
    //    {
    //        // Todo : Show message Done
    //        GetDashboardSettingsData();
    //        e.Cancel = false;
    //    }
    //    else
    //    {
    //        e.Cancel = true;
    //    }
    //}

    //protected async void OnRowRemoving(CancellableRowChange<DashboardSetting> model)
    //{
    //    if (dashboardSettings.Contains(model.Item))
    //    {
    //        if (await DashboardSettingService.RemoveDashboardSetting(model.Item))
    //        {
    //            // Todo : Done
    //            model.Cancel = false;
    //            dashboardSettings.Remove(model.Item);

    //        }
    //        else
    //        {
    //            model.Cancel = true;
    //        }

    //        GetDashboardSettingsData();

    //    }

    //}

}
